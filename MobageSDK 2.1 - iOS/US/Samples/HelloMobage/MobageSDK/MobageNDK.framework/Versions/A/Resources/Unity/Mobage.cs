//
//  Mobage.cs
//  mobage-ndk
//
//  Copyright (c) 2012, DeNA Co., Ltd. All rights reserved
//

#if !(HAS_MOBAGE_DESKTOP_SHIM && UNITY_EDITOR)
// Mobage don't support Unity Editor right now. (add "-define:HAS_MOBAGE_DESKTOP_SHIM" to /Assets/smcs.rsp to override)

using System;
using System.Collections;
using System.Collections.Generic;
using System.Runtime.InteropServices;

namespace Mobage {

	/**
	 * <summary> Initialize the Mobage service, and reestablish user sessions when necessary.</summary>
	 * <remarks>
	 
	 * </remarks>
	 */
	public partial class Mobage {}

#region Enums / Bitfields
	/**
	 * Enumeration of Mobage server environments that an app can use.
	 */
	public enum ServerEnvironment {
		/**
				 *
		 * Production environment.
		 * Use this environment when you are ready to submit your app to Mobage for publication.
		 */
		Production = 0, 
		/**
				 *
		 * Sandbox environment.
		 * Use this environment for testing your app.
		 */
		Sandbox = 1, 
	};
	
	public partial class Convert {
		public static bool IsServerEnvironment(int intFlag){return (!((intFlag < 0) || (intFlag > 1))); }
		public static int toC(ServerEnvironment enumValue){return (int)enumValue;}
		public static ServerEnvironment toCS_ServerEnvironment(int enumValue){return (ServerEnvironment)enumValue;}
	}
	
#endregion
	

#region Native Method Imports
	public partial class Mobage {

	#if UNITY_IPHONE && !UNITY_EDITOR
		[DllImport("__Internal")]
	#else
		[DllImport("NDKPlugin")] // Mobage-NDK doesn't have a framework for the desktop yet!
	#endif
		private static extern void MBCMobage_initializeMobageWithStandardParameters(Int32 input_serverEnvironment, IntPtr input_appId, IntPtr input_appVersion, IntPtr input_consumerKey, IntPtr input_consumerSecret, IntPtr context);
	
	}
#endregion
#region Native Return Points
	public partial class Mobage {
	}
#endregion



#region Delegate Callbacks
	public partial class Mobage {
	#pragma warning disable 0414
		private static int cbUidGenerator = 0;
		private static Dictionary<int, Delegate> pendingCallbacks = new Dictionary<int, Delegate>();
	#pragma warning restore 0414
	
	}
#endregion

#region Static Methods
	public partial class Mobage {
		/**
		 * <summary> Initialize the Mobage service, and report a Mobage analytics event indicating that the app has started.</summary>
		 * <remarks>
		 * Call this method immediately after your app starts.
		 * <p>
		 * <strong>Important</strong>: Call this method only once.
		 * </remarks>
		 * <param name="serverEnvironment" cref="F:Mobage.ServerEnvironment">Indicates whether to connect to Mobage's sandbox or production environment. Contains an enumerated value of Mobage::ServerEnvironment. <strong>Important</strong>: Before you submit your app to Mobage for review, you must change this value to refer to Mobage's production environment.</param>
		 * <param name="appId" cref="F:System.String">The app ID, also known as the "app key." Generated by the <a href="https://developer.mobage.com/">Mobage Developer Portal</a>.</param>
		 * <param name="appVersion" cref="F:System.String">The app version.</param>
		 * <param name="consumerKey" cref="F:System.String">The app's OAuth key for accessing the Mobage service. Generated by the <a href="https://developer.mobage.com/">Mobage Developer Portal</a>.</param>
		 * <param name="consumerSecret" cref="F:System.String">The app's OAuth secret for accessing the Mobage service. Generated by the <a href="https://developer.mobage.com/">Mobage Developer Portal</a>.</param>
		 */
		public static void initializeMobageWithStandardParameters(ServerEnvironment serverEnvironment, String appId, String appVersion, String consumerKey, String consumerSecret)
		{
			int cbId = (cbUidGenerator++);
			Int32 out_serverEnvironment = (int)serverEnvironment;

			IntPtr out_appId = (IntPtr)Convert.toC(appId);

			IntPtr out_appVersion = (IntPtr)Convert.toC(appVersion);

			IntPtr out_consumerKey = (IntPtr)Convert.toC(consumerKey);

			IntPtr out_consumerSecret = (IntPtr)Convert.toC(consumerSecret);

			MBCMobage_initializeMobageWithStandardParameters(out_serverEnvironment, out_appId, out_appVersion, out_consumerKey, out_consumerSecret, new IntPtr(cbId));
			
			// Free memory used for parameters
			Marshal.FreeHGlobal(out_appId);
			Marshal.FreeHGlobal(out_appVersion);
			Marshal.FreeHGlobal(out_consumerKey);
			Marshal.FreeHGlobal(out_consumerSecret);
		}
	}
#endregion


}

#endif // End compilation exception for UNITY_EDITOR && HAS_MOBAGE_DESKTOP_SHIM
